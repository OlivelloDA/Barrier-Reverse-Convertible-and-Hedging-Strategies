clear all; clc;

options = xlsread('Option_chain_15102021', 'options');
stock = xlsread('Option_chain_15102021', 'Stock');
interest_rate = xlsread('Option_chain_15102021', 'interest_rate');

S0 = stock;
q = 0.02;
T = options(:,1);
K = options(:,2);
flag = options(:,3);
market_price = options(:,4);

% computation of the interest rate for each maturity 
r = spline(interest_rate(1,:), interest_rate(2,:)/100, T);
T = T/365; % maturity in years


% find the implied volatility
sigma = zeros(length(T),1);

for i=1:length(T)
    % f: difference 
    % @(sig): makes f a function with only one argument (sig)
   % sigma(i,1)= fzero(@(sig)f(sig,S0,K(i),r(i),q,T(i),market_price(i),flag(i)),[0,1]);
    % g: squared difference
    sigma(i,1)= fminbnd(@(sig)g(sig,S0,K(i),r(i),q,T(i),market_price(i),flag(i)),0,1);
%this functiom minimize tha value of g changing the sigma value.

end



%Price Vanilla Options under Heston Model using FFT and Carr-Madan formula
%Calibration Heston Characteristic function parameters

%define initial parameters(Rouah, 2013) 2*kappa*eta > theta^2(FellerCondition)
sigma0 = 0.4;
kappa = 0.5;
eta = 10;
theta = 0.8; %higher than benchmark
rho = 0.8; %it should be between -1;1 so choose value in the middle

%algorithm that optimizes the difference between the market price and the
%heston model price , giving upper and lower bound for every parameter
A = [];
B = [];
%A=[x(4)^2];
%b =[2*x(2)*x(3)];
x0 = [sigma0,kappa,eta,theta,rho];
Aeq = [];
Beq = [];
ub = [Inf,Inf,Inf,Inf,+1];
lb = [0,0,0,0,-1];
%fval is the value of the objective function, so in this case the error
%value
[error,fval]  =  fmincon(@(X)rmse_Heston(X,S0,K,r,q,T,market_price,flag),x0,A,B,Aeq,Beq,lb,ub);
%the only values that changes are those linked to X
disp(error)
disp(fval)

first = [ 0.0733  ,  0.0064  , 20.0375 ,  14.2177 ,  -0.8748 ,    1.0172]
second = [0.0008  ,  0.0000  ,  0.1600  ,  1.7356   -0.0007, 0.8486]
third = [ 0.0218 ,   1.4321,    0.0047,   10.9414 ,  -0.1959,    0.9032]
fourth = [ 0.0003 ,   2.7402  ,  0.0000  ,  9.8846 ,  -0.4353,    0.5044]
fifth = [ 0.0003 ,   2.9443 ,   0.0000 ,  10.1639 ,  -0.3495 , 0.5044]
sixth = [ 0.0004  ,  2.8214  ,  0.0000 ,  10.3130 ,  -0.4659, 0.5044]
seventh = [ 0.0307 ,   1.4029 ,  2.5744 ,  10.2138  ,  0.8666, 6.4685e-05]
%calculated with absmse
absmse1 = [ 0.1628  ,  1.4085  ,  0.5674  ,  3.8560 ,  -0.0666,   14.0954]
absmse2 = [ 0.1266  ,  9.2436  ,  0.0966  ,  1.2504 ,  -0.9435,   14.0607]
absmse3 = [ 0.1257  , 11.9691  ,  0.0960  ,  1.9452 ,  -0.7833    ,  14.0644]
absme4 =  [0.2027    0.1475    9.6616    8.7906   -0.4555,   14.1056]

sigma_opt = 0.0605 ;
kappa =  1.3936 ;
eta = 10.0472 ;
theta = 4.7013; %higher than benchmark
rho = 0.5737;

model_price = zeros(length(market_price),1)
for i=1:length(market_price)
    % f: difference 
    % @(sig): makes f a function with only one argument (sig)
   % sigma(i,1)= fzero(@(sig)f(sig,S0,K(i),r(i),q,T(i),market_price(i),flag(i)),[0,1]);
    % g: squared difference
    model_price(i,1)= Heston_FFT(kappa, eta, theta, rho, sigma_opt, K(i), T(i), S0, r(i), q, flag(i));
%this functiom minimize tha value of g changing the sigma value.

end

figure()
plot(K,model_price,'r*','LineWidth',1.1)
hold on
plot(K,market_price,'bo','LineWidth',1.1)
hold on
xlabel('K')
ylabel('Price')
title('Calibration: Heston')
legend('Heston Price','Market Price','Market')

disp(['RMSE: ' num2str(sqrt(sum((model_price-market_price)).^2)/length(market_price));
disp(mean(market_price))

